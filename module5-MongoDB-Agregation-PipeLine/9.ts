// ‡¶†‡¶ø‡¶ï ‡¶Ü‡¶õ‡ßá ‚Äî ‡¶è‡¶¨‡¶æ‡¶∞ ‡¶Ü‡¶Æ‡¶ø **Indexing**, ‡¶Ü‡¶∞ MongoDB-‡¶è‡¶∞ **COLLSCAN vs IXSCAN** ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶Ø‡¶º ‡¶¨‡ßÅ‡¶ù‡¶ø‡¶Ø‡¶º‡ßá ‡¶¶‡¶ø‡¶ö‡ßç‡¶õ‡¶ø‡•§

// ---

// ## 1Ô∏è‚É£ Indexing ‡¶ï‡ßÄ?

// * Index ‡¶π‡¶≤‡ßã MongoDB-‡¶§‡ßá ‡¶°‡¶æ‡¶ü‡¶æ ‡¶ñ‡ßã‡¶Å‡¶ú‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶è‡¶ï‡¶ü‡¶æ **sorted data structure** (‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£‡¶§ B-Tree)
// * ‡¶Ø‡ßá‡¶≠‡¶æ‡¶¨‡ßá ‡¶¨‡¶á‡¶Ø‡¶º‡ßá‡¶∞ ‡¶∂‡ßá‡¶∑‡ßá **index page** ‡¶¶‡ßá‡¶ñ‡ßá ‡¶¶‡ßç‡¶∞‡ßÅ‡¶§ ‡¶™‡ßÉ‡¶∑‡ßç‡¶†‡¶æ‡¶∞ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º, MongoDB index-‡¶ì ‡¶è‡¶ï‡¶á ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡ßá ‚Üí ‡¶°‡¶æ‡¶ü‡¶æ‡¶¨‡ßá‡¶∏‡¶ï‡ßá ‡¶™‡ßÅ‡¶∞‡ßã collection ‡¶®‡¶æ ‡¶™‡ßú‡ßá ‡¶¶‡ßç‡¶∞‡ßÅ‡¶§ match ‡¶ï‡¶∞‡¶æ ‡¶°‡¶ï‡ßÅ‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶™‡ßá‡¶§‡ßá ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶ï‡¶∞‡ßá‡•§

// ---

// ### Without index:

// * MongoDB ‡¶™‡ßÅ‡¶∞‡ßã collection ‡¶∏‡ßç‡¶ï‡ßç‡¶Ø‡¶æ‡¶® ‡¶ï‡¶∞‡ßá (COLLSCAN)
// * ‡¶¨‡ßú ‡¶°‡¶æ‡¶ü‡¶æ‡¶§‡ßá ‡¶Ö‡¶®‡ßá‡¶ï slow ‡¶π‡ßü, ‡¶ï‡¶æ‡¶∞‡¶£ ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶°‡¶ï‡ßÅ‡¶Æ‡ßá‡¶®‡ßç‡¶ü sequentially ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßá‡•§

// ### With index:

// * MongoDB ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø index structure ‡¶•‡ßá‡¶ï‡ßá matching ‡¶°‡¶ï‡ßÅ‡¶Æ‡ßá‡¶®‡ßç‡¶ü‡ßá‡¶∞ position ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡ßá (IXSCAN)
// * ‡¶Ö‡¶®‡ßá‡¶ï ‡¶¶‡ßç‡¶∞‡ßÅ‡¶§ ‡¶π‡ßü‡•§

// ---

// ## 2Ô∏è‚É£ COLLSCAN vs IXSCAN

// ### **COLLSCAN** (Collection Scan)

// * MongoDB ‡¶™‡ßÅ‡¶∞‡ßã collection sequentially ‡¶™‡ßú‡ßá‡•§
// * **When it happens:**

//   * Query field ‡¶è ‡¶ï‡ßã‡¶®‡ßã index ‡¶®‡ßá‡¶á
//   * Index ‡¶•‡¶æ‡¶ï‡¶≤‡ßá‡¶ì query optimizer ‡¶∏‡ßá‡¶ü‡¶ø ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶®‡¶æ
// * **Performance:** Slow for large collections

// üìå Example:

// ```js
// db.users.find({ age: 25 }) // ‡¶Ø‡¶¶‡¶ø age-‡¶è index ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡ßá
// ```

// `explain()` ‡¶¶‡¶ø‡¶≤‡ßá `"stage": "COLLSCAN"` ‡¶Ü‡¶∏‡¶¨‡ßá‡•§

// ---

// ### **IXSCAN** (Index Scan)

// * MongoDB ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø index structure ‡¶•‡ßá‡¶ï‡ßá match ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶™‡¶æ‡¶Ø‡¶º‡•§
// * **When it happens:**

//   * Query field indexed
//   * Query optimizer index use ‡¶ï‡¶∞‡¶õ‡ßá
// * **Performance:** Much faster, especially for selective queries

// üìå Example:

// ```js
// db.users.createIndex({ age: 1 })
// db.users.find({ age: 25 })
// ```

// `explain()` ‡¶¶‡¶ø‡¶≤‡ßá `"stage": "IXSCAN"` ‡¶Ü‡¶∏‡¶¨‡ßá‡•§

// ---

// ## 3Ô∏è‚É£ ‡¶ï‡¶ø‡¶≠‡¶æ‡¶¨‡ßá ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶¨‡ßá query index use ‡¶ï‡¶∞‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ?

// ```js
// db.users.find({ age: 25 }).explain("executionStats")
// ```

// * `"stage": "COLLSCAN"` ‚Üí No index used
// * `"stage": "IXSCAN"` ‚Üí Index used

// ---

// ## 4Ô∏è‚É£ Index ‡¶è‡¶∞ ‡¶ß‡¶∞‡¶® (Short list)

// * **Single field index** ‚Üí `{ age: 1 }`
// * **Compound index** ‚Üí `{ age: 1, name: 1 }`
// * **Text index** ‚Üí `{ name: "text" }`
// * **Hashed index** ‚Üí `{ userId: "hashed" }`
// * **Wildcard index** ‚Üí `{ "$**": 1 }`

// ---

// ‡¶Ü‡¶Æ‡¶ø ‡¶ö‡¶æ‡¶á‡¶≤‡ßá ‡¶§‡ßã‡¶Æ‡¶æ‡¶ï‡ßá ‡¶è‡¶ï‡¶ü‡¶æ **same query COLLSCAN vs IXSCAN speed test** ‡¶ï‡¶∞‡¶ø‡¶Ø‡¶º‡ßá ‡¶¶‡ßá‡¶ñ‡¶æ‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø, ‡¶Ø‡¶æ‡¶§‡ßá ‡¶§‡ßÅ‡¶Æ‡¶ø live ‡¶¶‡ßá‡¶ñ‡¶¨‡ßá ‡¶ï‡¶ø‡¶≠‡¶æ‡¶¨‡ßá index query execution time 1000x ‡¶™‡¶∞‡ßç‡¶Ø‡¶®‡ßç‡¶§ ‡¶ï‡¶Æ‡¶ø‡¶Ø‡¶º‡ßá ‡¶¶‡¶ø‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡•§
// ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶ï‡¶ø ‡¶ö‡¶æ‡¶ì ‡¶Ü‡¶Æ‡¶ø ‡¶ì‡¶á demo ‡¶ï‡¶∞‡ßá ‡¶¶‡¶ø‡¶á?



// db.test.find({_id:ObjectId("6406ad63fc13ae5a40000065")}).explain("executionStats")
    
    
//     db.test.createIndex({ email: 1 })

//     db.test.dropIndex({ email: 1 })